name: Main Pipeline

on:
  push:
    branches:
      - main  
  workflow_dispatch:

jobs:
  setup-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.11"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt          

  run-tests:
    runs-on: ubuntu-latest
    needs: setup-python
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt          

      - name: Run PyTest
        run: |          
          pytest tests/ --junitxml=pytest-report.xml --html=pytest-report.html
      
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            pytest-report.xml
            pytest-report.html

  run-linting:
    runs-on: ubuntu-latest
    needs: setup-python
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt          

      - name: Run PyLint
        run: |
          pylint $(git ls-files '*.py')        

  handle-errors:
    runs-on: ubuntu-latest
    needs: run-tests
    if: failure()
    steps:
      - name: Notify on failure
        run: echo "Tests failed! Notify the team."
        # You can include steps to send notifications, alerting your team about the test failure
    # ...

# Artifacts configuration...
